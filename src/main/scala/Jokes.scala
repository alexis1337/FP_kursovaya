import cats.data.StateT
import cats.effect.IO
import scala.util.Random

object Jokes {

  // Список анекдотов — иммутабельный
  val jokes: List[String] = List(
    "Анекдот 1: Почему программисты не любят природу? Там много багов.",
    "Анекдот 2: Как зовут программиста без девушки? Одинокий байт.",
    "Анекдот 3: Почему функциональные программисты никогда не спорят? Потому что у них нет состояний — только чистые функции.",
    "Анекдот 4: Как функциональный программист открывает дверь? Он не открывает её — он создаёт новую дверь с другим состоянием.",
    "Анекдот 5: Пошутил ли когда-нибудь функциональный программист? Нет, у него нет состояния юмора.",
    "Анекдот 6: Почему функциональное программирование — это как песня? Потому что всё строится из композиций.",
    "Анекдот 7: Почему функциональный программист не заводит детей? Потому что не хочет мутировать состояние.",
    """Анекдот 8: Функциональный программист приходит в бар и заказывает напиток. Бармен спрашивает:
                — Какой?
                Он отвечает:
                — Вот функция, которая описывает твой следующий шаг.""",
    "Анекдот 9: Функциональное программирование — это когда ты так боишься изменений, что просто создаёшь новый объект и убегаешь.",
    """Анекдот 10: Программист-функционалист пытается объяснить девушке свои чувства. Она спрашивает:
                — А что ты чувствуешь?
                Он:
                — Чистую функцию от тебя к себе.""",
    "Анекдот 11: Если твоя функция изменяет состояние — это баг. Если твоя функция изменяет состояние и ты это знаешь — это фича.",
    "Анекдот 12: Функциональный программист пьёт кофе только один раз — потом он создаёт новую чашку.",
    "Анекдот 13: Потерялся в НГТУ? Он не бежит и не паникует — он просто создаёт новое состояние «в НГТУ не потерян» и работает с ним."
  )

  // Чистая функция выбора анекдота по индексу
  def selectJoke(index: Int): String = jokes(index % jokes.length)

  // Тип для состояния логов 
  type LoggedState[A] = StateT[IO, List[String], A]

  // Случайный анекдот с записью лога в состоянии
  def getRandomJokeWithLog: LoggedState[String] = StateT { logs =>
    IO {
      val rng = new Random()
      val idx = rng.nextInt(jokes.length)
      val joke = selectJoke(idx)
      val newLogs = logs :+ s"Выбран анекдот: $joke"
      (newLogs, joke)
    }
  }

  // Просто получить случайный анекдот (без логирования) в IO
  def getRandomJoke: IO[String] = IO {
    val rng = new Random()
    selectJoke(rng.nextInt(jokes.length))
  }
}
